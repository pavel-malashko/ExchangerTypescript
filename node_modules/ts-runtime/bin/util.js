"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var chalk_1 = require("chalk");
var errors_1 = require("../errors");
function formatDiagnostics(diagnostics) {
    var formatted = [];
    for (var _i = 0, diagnostics_1 = diagnostics; _i < diagnostics_1.length; _i++) {
        var diag = diagnostics_1[_i];
        formatted.push(ts.formatDiagnostics([diag], {
            getCurrentDirectory: function () { return ts.sys.getCurrentDirectory(); },
            getNewLine: function () { return ts.sys.newLine; },
            getCanonicalFileName: function (f) { return f; }
        }).trim());
    }
    return formatted.filter(function (str) { return str.trim().length > 0; });
}
exports.formatDiagnostics = formatDiagnostics;
function getError(error, options) {
    var err = typeof error === 'string' ? error : '';
    var isProgramError = false;
    if (error instanceof Error) {
        if (error.stack) {
            err += error.stack;
        }
        if (error.message && err.indexOf(error.message) === -1) {
            err = err ? error.message + " " + err : error.message;
        }
        if (error.name === errors_1.ProgramError.id) {
            isProgramError = true;
            err = err.replace(errors_1.ProgramError.id + ": ", '');
        }
    }
    if (isProgramError) {
        var split = err.split('\n');
        var result = split.slice(0, 1);
        return result[0];
    }
    else if (options) {
        var limit = options.stackTraceOutput;
        limit = typeof limit === 'string' ? parseInt(limit) : limit;
        limit = limit < 0 ? 0 : limit;
        limit = limit === undefined ? 3 : limit;
        var lines = limit === 0 ? 1 : limit + 1;
        var split = err.split('\n');
        var result = split.slice(0, lines);
        if (limit > 0 && split.length > result.length) {
            result.push(chalk_1.default.bold("    -> There are " + (split.length - lines) + " more items on the stack trace. Use option -s " + (split.length - 1) + " to show the full stack trace."));
        }
        return result.join('\n');
        ;
    }
    return err;
}
exports.getError = getError;
