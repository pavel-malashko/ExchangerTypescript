"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var bus = require("../bus");
var util = require("./util");
var transform_1 = require("../transform");
var options;
var started = false;
function handleError(error) {
    process.send({ message: 'error', payload: util.getError(error, options) });
}
process.on('message', function (data) {
    options = data.payload[1];
    if (data.message === 'startTransformation' && !started) {
        started = true;
        transform_1.transform(data.payload[0], data.payload[1]);
    }
});
process.on('uncaughtException', handleError);
process.on('unhandledRejection', handleError);
bus.on(bus.events.ERROR, handleError);
bus.on(bus.events.WARN, function (args) {
    process.send({ message: 'warn', payload: args });
});
bus.on(bus.events.START, function (args) {
    process.send({ message: 'start', payload: args });
});
bus.on(bus.events.SCAN, function (args) {
    process.send({ message: 'scan', payload: args });
});
bus.on(bus.events.TRANSFORM, function (args) {
    var sourceFiles = args[0];
    var time = args[1];
    var fileNames = sourceFiles.map(function (sf) { return sf.fileName; });
    process.send({ message: 'transform', payload: [fileNames, time] });
});
bus.on(bus.events.EMIT, function (args) {
    process.send({ message: 'emit', payload: args });
});
bus.on(bus.events.DIAGNOSTICS, function (args) {
    var diagnostics = args[0];
    var formatted = util.formatDiagnostics(diagnostics);
    var i, j, temp, chunk = 10;
    for (i = 0, j = formatted.length; i < j; i += chunk) {
        temp = formatted.slice(i, i + chunk);
        process.send({ message: 'diagnostics', payload: [temp] });
    }
});
bus.on(bus.events.CLEAN, function (args) {
    process.send({ message: 'cleanup', payload: args });
});
bus.on(bus.events.STOP, function (args) {
    process.send({ message: 'stop', payload: args });
});
bus.on(bus.events.END, function (args) {
    process.send({ message: 'end', payload: args });
});
