"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var cp = require("child_process");
var path = require("path");
var ora = require("ora");
var chalk_1 = require("chalk");
var util = require("./util");
var child;
var started = false;
var pkgVersion;
var spinner = ora();
var current = 'Processing';
var currentPast = 'Processed';
var hasErrors = false;
var numDiagnostics = 0;
var warnings = [];
var options;
function start(opts, version) {
    pkgVersion = version;
    current = 'Processing';
    currentPast = 'Processed';
    hasErrors = false;
    numDiagnostics = 0;
    warnings = [];
    options = opts;
    exports.status.init();
    exports.status.start();
}
exports.start = start;
function transform(entryFiles) {
    if (child) {
        return;
    }
    child = cp.fork(path.join(__dirname, './process'));
    started = true;
    child.on('exit', function (code) {
        exports.status.term();
        child.stdin.end();
        child.kill();
        process.exit(code);
    });
    child.on('message', function (data) {
        if (typeof exports.status[data.message] === 'function') {
            if (Array.isArray(data.payload)) {
                exports.status[data.message].apply(exports.status, data.payload);
            }
            else {
                exports.status[data.message](data.payload);
            }
        }
    });
    child.send({ message: 'startTransformation', payload: [entryFiles, options] });
}
exports.transform = transform;
exports.status = {
    init: function () {
        spinner = null;
        spinner = ora();
    },
    start: function () {
        current = 'Processing';
        currentPast = 'Processed';
        if (!started)
            spinner.info(chalk_1.default.bold("ts-runtime v" + pkgVersion));
        spinner.text = current;
        spinner.start();
    },
    transform: function (fileNames, time) {
        spinner.succeed(current + " (" + time + ")");
        current = 'Transforming';
        currentPast = 'Transformed';
        spinner.text = chalk_1.default.bold(current);
        spinner.start();
    },
    emit: function (time) {
        spinner.succeed(current + " (" + time + ")");
        current = 'Emitting';
        currentPast = 'Emitted';
        spinner.text = chalk_1.default.bold(current);
        spinner.start();
    },
    scan: function (time) {
        spinner.succeed(current + " (" + time + ")");
        current = 'Scanning';
        currentPast = 'Scanned';
        spinner.text = chalk_1.default.bold(current);
        spinner.start();
    },
    cleanup: function (time) {
        spinner.succeed(current + " (" + time + ")");
        current = 'Cleaning';
        currentPast = 'Cleaned';
        spinner.text = chalk_1.default.bold(current);
        spinner.start();
    },
    diagnostics: function (diags, total) {
        total = total || diags.length;
        numDiagnostics += diags.length;
        for (var _i = 0, diags_1 = diags; _i < diags_1.length; _i++) {
            var diag = diags_1[_i];
            spinner.fail(diag);
        }
        if (total > diags.length) {
            spinner.fail(chalk_1.default.bold("    -> " + (total - diags.length) + " diagnostics have been hidden."));
        }
        spinner.start();
    },
    end: function (time, totalTime) {
        spinner.succeed(current + " (" + time + ")");
        for (var _i = 0, warnings_1 = warnings; _i < warnings_1.length; _i++) {
            var warning = warnings_1[_i];
            spinner.warn(chalk_1.default.yellow(warning));
        }
        if (hasErrors) {
            spinner.fail(chalk_1.default.red.bold("Done in " + totalTime + ", but there were errors."));
        }
        else if (numDiagnostics > 0) {
            var wasWere = numDiagnostics === 1 ? 'was' : 'were';
            var diagPlural = numDiagnostics === 1 ? 'diagnostic' : 'diagnostics';
            var text = "Done in " + totalTime + ", but there " + wasWere + " " + numDiagnostics + " compiler " + diagPlural;
            if (warnings.length > 0) {
                var warningPlural = warnings.length === 1 ? 'warning' : 'warnings';
                text += " and " + warnings.length + " " + warningPlural;
            }
            spinner.succeed(chalk_1.default.yellow.bold(text + "."));
        }
        else if (warnings.length > 0) {
            var wasWere = warnings.length === 1 ? 'was' : 'were';
            var warningPlural = warnings.length === 1 ? 'warning' : 'warnings';
            spinner.succeed(chalk_1.default.yellow.bold("Done in " + totalTime + ", but there " + wasWere + " " + warnings.length + " " + warningPlural + "."));
        }
        else {
            spinner.succeed(chalk_1.default.green.bold("Done in " + totalTime + "."));
        }
        process.exit(0);
    },
    warn: function (warning, defer) {
        if (defer === void 0) { defer = true; }
        if (warnings.indexOf(warning) === -1) {
            warnings.push(warning);
        }
        else if (!defer) {
            spinner.warn(warning);
        }
    },
    stop: function () {
        hasErrors = true;
        exports.status.error();
    },
    term: function () {
        hasErrors = true;
        if (started) {
            spinner.fail(chalk_1.default.red.bold(current + " was interrupted."));
        }
    },
    error: function (error) {
        hasErrors = true;
        var err = util.getError(error);
        if (err) {
            spinner.fail(err);
        }
        exports.status.term();
        process.exit(1);
    },
};
process.on('uncaughtException', function (error) {
    exports.status.error(error);
});
process.on('unhandledRejection', function (reason, p) {
    exports.status.error(new Error(reason));
});
process.on('SIGINT', function () {
    exports.status.term();
    process.exit(0);
});
process.on('SIGTERM', function () {
    exports.status.term();
    process.exit(0);
});
