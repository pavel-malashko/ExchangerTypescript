import * as ts from 'typescript';
import { Options } from '../options';
import { Factory } from '../factory';
import { Scanner } from '../scanner';
import { MutationContext } from '../context';
export declare abstract class Mutator {
    protected abstract kind: ts.SyntaxKind | ts.SyntaxKind[];
    protected abstract mutate(node: ts.Node): ts.Node;
    protected context: MutationContext;
    protected node: ts.Node;
    mutateNode(node: ts.Node, context: MutationContext): ts.Node;
    shouldMutate(node: ts.Node): boolean;
    readonly options: Options;
    readonly factory: Factory;
    readonly scanner: Scanner;
    readonly skip: <T extends ts.Node>(node: T, recursive: boolean, ...exclude: ts.Node[]) => T;
    readonly shouldSkip: (node: ts.Node) => boolean;
    readonly map: <T extends ts.Node>(alias: T, original: ts.Node) => T;
}
