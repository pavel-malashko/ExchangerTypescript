"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var ts = require("typescript");
var util = require("../util");
var Mutator_1 = require("./Mutator");
var SourceFileMutator = /** @class */ (function (_super) {
    __extends(SourceFileMutator, _super);
    function SourceFileMutator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.kind = ts.SyntaxKind.SourceFile;
        return _this;
    }
    SourceFileMutator.prototype.mutate = function (node) {
        var statements = util.arrayFromNodeArray(node.statements);
        var declarations = [];
        if (this.options.moduleAlias) {
            declarations.push(ts.createImportDeclaration(undefined, undefined, undefined, ts.createLiteral('module-alias/register')));
        }
        if (!this.options.excludeDeclarationFile && this.context.scanner.getDeclarations().length > 0 && this.context.isEntryFile(node.fileName)) {
            var relativePath = path.relative(path.dirname(node.fileName), this.context.commonDir);
            var filePath = path.join(relativePath, this.context.options.declarationFileName);
            var prefix = !relativePath ? './' : '';
            declarations.push(ts.createImportDeclaration(undefined, undefined, undefined, ts.createLiteral("" + prefix + filePath)));
        }
        if (!this.options.excludeLib) {
            declarations.push(this.factory.importLibStatement());
        }
        statements.unshift.apply(statements, declarations);
        return declarations.length > 0 ? ts.updateSourceFileNode(node, statements) : node;
    };
    return SourceFileMutator;
}(Mutator_1.Mutator));
exports.SourceFileMutator = SourceFileMutator;
