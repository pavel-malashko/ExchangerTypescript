"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var Mutator_1 = require("./Mutator");
var InterfaceDeclarationMutator = /** @class */ (function (_super) {
    __extends(InterfaceDeclarationMutator, _super);
    function InterfaceDeclarationMutator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.kind = ts.SyntaxKind.InterfaceDeclaration;
        return _this;
    }
    InterfaceDeclarationMutator.prototype.mutate = function (node) {
        if (this.removeInterface(node)) {
            return null;
        }
        return this.factory.interfaceSubstitution(node);
    };
    InterfaceDeclarationMutator.prototype.removeInterface = function (node) {
        var nodeSymbol = this.scanner.getNodeSymbol(node.name);
        var willBeDeclaredInClass = this.willBeDeclaredInClass(nodeSymbol.getDeclarations());
        var wasMerged = this.context.wasMerged(nodeSymbol);
        if (!willBeDeclaredInClass) {
            this.context.setMerged(nodeSymbol);
        }
        return willBeDeclaredInClass || wasMerged;
    };
    InterfaceDeclarationMutator.prototype.willBeDeclaredInClass = function (declarations) {
        for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {
            var declaration = declarations_1[_i];
            if (ts.isClassDeclaration(declaration)) {
                return true;
            }
        }
        return false;
    };
    return InterfaceDeclarationMutator;
}(Mutator_1.Mutator));
exports.InterfaceDeclarationMutator = InterfaceDeclarationMutator;
