"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var Mutator_1 = require("./Mutator");
var BinaryExpressionMutator = /** @class */ (function (_super) {
    __extends(BinaryExpressionMutator, _super);
    function BinaryExpressionMutator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.kind = ts.SyntaxKind.BinaryExpression;
        _this.assignmentOperators = [
            ts.SyntaxKind.EqualsToken,
            ts.SyntaxKind.PlusEqualsToken,
            ts.SyntaxKind.MinusEqualsToken,
            ts.SyntaxKind.AsteriskAsteriskEqualsToken,
            ts.SyntaxKind.AsteriskEqualsToken,
            ts.SyntaxKind.SlashEqualsToken,
            ts.SyntaxKind.PercentEqualsToken,
            ts.SyntaxKind.AmpersandEqualsToken,
            ts.SyntaxKind.BarEqualsToken,
            ts.SyntaxKind.CaretEqualsToken,
            ts.SyntaxKind.LessThanLessThanEqualsToken,
            ts.SyntaxKind.GreaterThanGreaterThanGreaterThanEqualsToken,
            ts.SyntaxKind.GreaterThanGreaterThanEqualsToken
        ];
        return _this;
    }
    BinaryExpressionMutator.prototype.mutate = function (node) {
        if (node.left.kind !== ts.SyntaxKind.Identifier) {
            return node;
        }
        if (!this.isAssignmentOperator(node)) {
            return node;
        }
        if (!ts.isIdentifier(node.left)) {
            return node;
        }
        if (!this.options.assertAny && this.context.isAny(node.left)) {
            return node;
        }
        // if (this.context.isSafeAssignment(node.left, node.right)) {
        //   return node;
        // }
        var name = this.context.getTypeDeclarationName(node.left);
        var right = this.factory.typeAssertion(name, node.right);
        return ts.updateBinary(node, node.left, right);
    };
    BinaryExpressionMutator.prototype.isAssignmentOperator = function (node) {
        return this.assignmentOperators.indexOf(node.operatorToken.kind) !== -1;
    };
    return BinaryExpressionMutator;
}(Mutator_1.Mutator));
exports.BinaryExpressionMutator = BinaryExpressionMutator;
