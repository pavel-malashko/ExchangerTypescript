"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var util = require("../util");
var Mutator_1 = require("./Mutator");
var VariableDeclarationListMutator = /** @class */ (function (_super) {
    __extends(VariableDeclarationListMutator, _super);
    function VariableDeclarationListMutator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.kind = ts.SyntaxKind.VariableDeclarationList;
        _this.incompatibleParents = [
            ts.SyntaxKind.ForOfStatement,
            ts.SyntaxKind.ForInStatement,
            ts.SyntaxKind.CatchClause,
            ts.SyntaxKind.ImportClause
        ];
        return _this;
    }
    VariableDeclarationListMutator.prototype.mutate = function (node) {
        if (!this.shouldTransform(node)) {
            return node;
        }
        var declarations = [];
        for (var _i = 0, _a = node.declarations; _i < _a.length; _i++) {
            var declaration = _a[_i];
            declarations.push.apply(declarations, this.transform(declaration));
        }
        return ts.updateVariableDeclarationList(node, declarations);
    };
    VariableDeclarationListMutator.prototype.transform = function (node) {
        if (!ts.isIdentifier(node.name)) {
            return [node];
        }
        var isConstDeclaration = util.hasFlag(node.parent, ts.NodeFlags.Const);
        if (isConstDeclaration) {
            return this.transformConstDeclaration(node);
        }
        return this.transformDeclaration(node);
    };
    VariableDeclarationListMutator.prototype.transformDeclaration = function (node) {
        if (!this.options.assertAny && this.context.isAny(node.type)) {
            return [node];
        }
        var nodeName = this.context.getTypeDeclarationName(node.name.text);
        var typeDefinition = this.factory.typeDeclaration(nodeName, node.type);
        if (!node.initializer) {
            return [typeDefinition, node];
        }
        // if (this.context.isSafeAssignment(node.type, node.initializer)) {
        //   return [typeDefinition, node];
        // }
        var initializer = this.factory.typeAssertion(nodeName, node.initializer);
        var assignment = ts.updateVariableDeclaration(node, node.name, node.type, initializer);
        return [typeDefinition, assignment];
    };
    VariableDeclarationListMutator.prototype.transformConstDeclaration = function (node) {
        if (!this.options.assertAny && this.context.isAny(node.type)) {
            return [node];
        }
        if (!node.initializer || !node.type || (!this.options.assertAny && this.context.isAny(node.type))) {
            return [node];
        }
        // if (this.context.isSafeAssignment(node.type, node.initializer)) {
        //   return [node];
        // }
        var nodeName = this.context.getTypeDeclarationName(node.name.text);
        var initializer = this.factory.typeReflectionAndAssertion(node.type, node.initializer);
        var assignment = ts.updateVariableDeclaration(node, node.name, node.type, initializer);
        return [assignment];
    };
    VariableDeclarationListMutator.prototype.shouldTransform = function (node) {
        if (!node.declarations) {
            return false;
        }
        if (node.parent && this.incompatibleParents.indexOf(node.parent.kind) !== -1) {
            return false;
        }
        return true;
    };
    return VariableDeclarationListMutator;
}(Mutator_1.Mutator));
exports.VariableDeclarationListMutator = VariableDeclarationListMutator;
