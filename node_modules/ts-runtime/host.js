"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var ts = require("typescript");
var Host = /** @class */ (function () {
    function Host(files, compilerOptions, setParentNodes) {
        if (setParentNodes === void 0) { setParentNodes = true; }
        this.compilerOptions = compilerOptions;
        this.fileMap = new Map();
        this.outputs = new Map();
        this.defaultLibFileName = 'node_modules/typescript/lib/lib.d.ts';
        this.defaultLibLocation = 'node_modules/typescript/lib/';
        this.currentDirectory = '';
        this.caseSensitiveFileNames = false;
        this.newLine = '\n';
        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {
            var file = files_1[_i];
            this.fileMap.set(file.name, ts.createSourceFile(file.name, file.text, compilerOptions.target, setParentNodes));
        }
    }
    Host.prototype.getResult = function () {
        var result = [];
        var cwd = process.cwd();
        this.outputs.forEach(function (text, name) {
            var sepRegExp = new RegExp("^\\" + path.sep + "+");
            name = name.split("" + cwd + path.sep).join('');
            name = name.replace(sepRegExp, '');
            result.push({ name: name, text: text });
        });
        return result;
    };
    Host.prototype.setDefaultLibFileName = function (defaultLibFileName) {
        this.defaultLibFileName = defaultLibFileName;
    };
    Host.prototype.setDefaultLibLocation = function (defaultLibLocation) {
        this.defaultLibLocation = defaultLibLocation;
    };
    Host.prototype.setCurrentDirectory = function (currentDirectory) {
        this.currentDirectory = currentDirectory;
    };
    Host.prototype.setUseCaseSensitiveFileNames = function (useCaseSensitiveFileNames) {
        this.caseSensitiveFileNames = useCaseSensitiveFileNames;
    };
    Host.prototype.setNewLine = function (newLine) {
        this.newLine = newLine;
    };
    Host.prototype.getSourceFile = function (fileName) {
        return this.fileMap.get(fileName);
    };
    Host.prototype.getDefaultLibFileName = function (options) {
        return path.join(path.resolve(path.dirname(this.defaultLibFileName)), path.basename(this.defaultLibFileName));
    };
    Host.prototype.getDefaultLibLocation = function () {
        return path.resolve(this.defaultLibLocation);
    };
    Host.prototype.getCurrentDirectory = function () {
        return path.resolve(this.currentDirectory);
    };
    Host.prototype.getDirectories = function (path) {
        return [];
    };
    Host.prototype.getCanonicalFileName = function (fileName) {
        return fileName;
    };
    Host.prototype.useCaseSensitiveFileNames = function () {
        return this.caseSensitiveFileNames;
    };
    Host.prototype.getNewLine = function () {
        return this.newLine;
    };
    Host.prototype.fileExists = function (fileName) {
        return this.fileMap.has(fileName);
    };
    Host.prototype.readFile = function (fileName) {
        return this.fileMap.has(fileName) ? this.fileMap.get(fileName).text : undefined;
    };
    Host.prototype.writeFile = function (fileName, data, writeByteOrderMark, onError, sourceFiles) {
        this.outputs.set(fileName, data);
    };
    return Host;
}());
exports.Host = Host;
