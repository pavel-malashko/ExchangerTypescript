import * as ts from 'typescript';
export interface FileReflection {
    name: string;
    text: string;
}
export declare class Host implements ts.CompilerHost {
    private compilerOptions;
    private fileMap;
    private outputs;
    private defaultLibFileName;
    private defaultLibLocation;
    private currentDirectory;
    private caseSensitiveFileNames;
    private newLine;
    constructor(files: FileReflection[], compilerOptions: ts.CompilerOptions, setParentNodes?: boolean);
    getResult(): FileReflection[];
    setDefaultLibFileName(defaultLibFileName: string): void;
    setDefaultLibLocation(defaultLibLocation: string): void;
    setCurrentDirectory(currentDirectory: string): void;
    setUseCaseSensitiveFileNames(useCaseSensitiveFileNames: boolean): void;
    setNewLine(newLine: string): void;
    getSourceFile(fileName: string): ts.SourceFile;
    getDefaultLibFileName(options: ts.CompilerOptions): string;
    getDefaultLibLocation(): string;
    getCurrentDirectory(): string;
    getDirectories(path: string): string[];
    getCanonicalFileName(fileName: string): string;
    useCaseSensitiveFileNames(): boolean;
    getNewLine(): string;
    fileExists(fileName: string): boolean;
    readFile(fileName: string): string;
    writeFile(fileName: string, data: string, writeByteOrderMark?: boolean, onError?: (message: string) => void, sourceFiles?: ts.SourceFile[]): void;
}
